#!/usr/bin/env node

'use strict';

/**
 * Imports
 */
const program = require('commander');
const chalk = require('chalk');
const Table = require('easy-table');
const opn = require('opn');
const childProcess = require('child_process');
const path = require('path');
const rimraf = require('rimraf');
const fs = require('fs');
const utils = require('../lib/dumbledore/utils');
const cli = require('../lib/dumbledore/cli');
const prompt = require('../lib/dumbledore/prompt');
const ensure = require('../lib/dumbledore/config');

/**
 * Constants
 */
const spawn = childProcess.spawn;
const exec = childProcess.exec;
const CONFIG_MSG = `${chalk.bold('Dumbledore')} requires a quick setup to generate a config.json entry. You are free to write your own or follow the prompts below.`;
const CONFIG_SPELL = 'Accio config!';
const CONFIG_QUIT = 'Press ^C at any time to quit.';
const ALLOWED_CMDS = [
  'create', 'ls', 'rm', 'open', 'start', 'stop', 'edit', 'logs',
];

ensure((config) => {

  program.version('1.2.0');

  program
    .command('create [label]')
    .description('creates a new instance')
    .option('-r, --repo-url <repoUrl>', 'Github repository URL')
    .action(create);

  program
    .command('ls')
    .description('lists all Dumbledore instances')
    .action(ls);

  program
    .command('open <label>')
    .description('loads a project instance into a browser')
    .action(open);

  program
    .command('start <label>')
    .description('starts a Dumbledore server')
    .action(start);

  program
    .command('stop <label>')
    .description('stops a Dumbledore server')
    .action(stop);

  program
    .command('edit <label>')
    .description('loads a project instance into an IDE')
    .action(edit);

  program
    .command('rm <label>')
    .description('deletes a Dumbledore repo and config')
    .action(rm);

  program
    .command('logs <label>')
    .description('check logs for a Dumbledore server')
    .action(logs);

  program.parse(process.argv);

  if (process.argv < 3 || ALLOWED_CMDS.indexOf(process.argv[2]) === -1) {
    program.help();
    process.exit();
  }

  const getLabel = (label, cb) => label ? cb(label) : prompt('Enter a label', /[^ ]+/, cb);
  const getRepoUrl = (url, cb) => url ? cb(url) : prompt('Github repository URL', /\.git\/?/gi, cb);

  function create(arg, options) {
    const opts = options || {};
    getLabel(arg, (label) => {
      config.read((err, json) => {
        if (err) {
          throw err;
        }
        if (json[label]) {
          cli.error(`Label ${chalk.bold(label)} is already being used.`);
          process.exit();
        }
        getRepoUrl(opts.repoUrl, (repoURL) => {
          json[label] = { repoURL };
          config.write(json, (err) => {
            if (err) {
              console.log(err);
            } else {
              console.log(`Created successfully!`);
              start(label);
            }
          });
        });
      });
    });
  }

  function ls() {
    config.read((err, processes) => {
      if (err) {
        throw err;
      }
      const labels = Object.keys(processes);
      let i = 0;
      const makeTable = (t, label) => {
        utils.isRunning(processes[label].pid, (err, isRunning) => {
          t.cell('NAME', label);
          t.cell('REPOSITORY', processes[label].repoURL);
          t.cell('STATUS', isRunning ? 'Running' : 'Stopped');
          t.newRow();
          i++;
          if (i === labels.length) {
            const servers = `${chalk.bold('Dumbledore')} knows of the following servers:\n\n${t.toString()}`;
            cli.spell(servers, 'Accio Servers', true);
            process.exit();
          }
        });
      }
      const t = new Table();
      if (labels.length) {
        labels.forEach((label) => {
          makeTable(t, label);
        });
      } else {
        cli.error('No dumbledore instances found. Run `dumbledore create <label>` to get started.');
        process.exit();
      }
    });
  }

  function open(label) {
    config.read((err, processes) => {
      if (err) {
        throw err;
      }
      if (!processes[label]) {
        cli.error(`Label ${chalk.bold(label)} does not exist. To create it, run \`dumbledore create ${label}\`.`);
        process.exit();
      }
      utils.isRunning(processes[label].pid, (err, isRunning) => {
        if (isRunning) {
          opn('http://localhost:' + processes[label].port);
        } else {
          cli.error(`Dumbledore is not running label ${chalk.bold(label)}.`);
        }
        process.exit();
      });
    });
  }

  function start(label) {
    if (!label) {
      cli.error('No label provided.');
      process.exit();
    }

    config.read((err, json) => {
      if (err) {
        throw err;
      }
      if (!json[label]) {
        cli.error(`No Dumbledore instance exists with label ${chalk.bold(label)}.`);
        process.exit();
      }
      const conf = json[label];

      const start = () => {
        const child = spawn(process.argv[0] ,[`${path.resolve(__dirname, '..', 'index.js')} &> ${config.path('logs', `${label}.log`)}`], {
          env: {
            DUMBLEDORE_LABEL: label,
          },
          detached: true,
          shell: true,
        });
        json[label].pid = child.pid;
        child.unref();
        config.write(json, (err) => {
          if (err) {
            console.log(err);
          }
          cli.spell(`${chalk.bold('Dumbledore')} is running ${chalk.bold(label)}. Run \`dumbledore stop ${label}\` to stop the server.`, 'Wingardium Leviosa');
          process.exit();
        });
      };

      if (!conf.pid) {
        start();
      } else {
        utils.isRunning(conf.pid, (err, isRunning) => {
          if (err || !isRunning) {
            start();
          } else {
            cli.error(`Dumbledore already running on pid ${chalk.bold(conf.pid)}.`);
            process.exit();
          }
        });
      }
    });
  }

  function stop(label) {
    config.read((err, processes) => {
      if (err) {
        throw err;
      }
      if (!processes[label]) {
        cli.error(`Label ${chalk.bold(label)} does not exist. To create it, run \`dumbledore create ${label}\`.`);
        process.exit();
      }
      const pid = processes[label].pid;
      const kill = (proc, cb) => {
        utils.isRunning(proc, (err, isRunning) => {
          if (isRunning) {
            exec(`kill -9 ${proc}`, (err) => {
              cb();
            });
          } else {
            cb();
          }
        });
      };
      utils.isRunning(pid, (err, isRunning) => {
        if (isRunning) {
          kill(pid, (err) => { // HACKY
            kill(pid + 1, () => { // HACKIER
              kill(pid + 2, () => { // HACKIEST
                cli.spell(`${chalk.bold('Dumbledore')} has stopped running label ${chalk.bold(label)}.`, 'Petrificus Totalus');
                process.exit();
              });
            });
          });
        } else {
          cli.error(`Label ${chalk.bold(label)} is not running.`);
          process.exit();
        }
      });
    });
  }

  function edit(label) {
    config.read((err, processes) => {
      if (err) {
        throw err;
      }
      if (!processes[label]) {
        cli.error(`Label ${chalk.bold(label)} does not exist. To create it, run \`dumbledore create ${label}\`.`);
        process.exit();
      }
      if (!processes[label].directory) {
        cli.error(`Label ${chalk.bold(label)} does not currently have a directory. To create it and pull down the attached repo, run \`dumbledore start ${label}\`.`);
        process.exit();
      }
      const dir = processes[label].directory;
      const child = spawn('/bin/bash', [`mate ${dir} || subl ${dir} || atom ${dir}`], {
        detached: true,
        shell: true,
      });
      child.unref();
      process.exit();
    });
  }

  function rm(label) {
    config.read((err, processes) => {
      const del = () => {
        delete processes[label];
        config.write(processes, () => {
          console.log(`Label ${label} deleted successfully.`);
          process.exit();
        });
      };
      if (err) {
        throw err;
      }
      if (!processes[label]) {
        cli.error(`Label ${chalk.bold(label)} does not exist.`);
        process.exit();
      }
      utils.isRunning(processes[label].pid, (err, isRunning) => {
        if (isRunning) {
          cli.error(`Label ${chalk.bold(label)} is still running and you must stop it before deleting.`);
          process.exit();
        } else if (!processes[label].directory) {
          del(processes);
        } else {
          rimraf(processes[label].directory, () => {
            del(processes);
          });
        }
      });
    });
  }

  function logs(label, options) {
    const filename = config.path('logs', `${label}.log`);
    fs.readFile(filename, 'utf8', (err, text) => {
      if (err) {
        cli.error(`A log file does not exist for label ${label}.`);
        process.exit();
      } else {
        console.log(text.split('\n').slice(-10).join('\n'));
        fs.open(filename, 'r', function (err, fd) {
          const buf = new Buffer(4096);
          fs.watchFile(filename, (curr, prev) => {
            const len = curr.size - prev.size;
            const position = prev.size;
            if (len > 0) {
              fs.read(fd, buf, 0, len, position, (err, bytesRead, buffer) => {
                if (err) {
                  console.error(err);
                  return;
                }
                const msg = buffer.toString('utf8', 0, bytesRead);
                process.stdout.write(msg);
              });
            }
          });
        });
      }
    });
  }
});
